
/***
The on-board LED (R+B+G) is connected to PF1, PF2 and PF3 respectively. PF2 and PF3 module is connected to PWM1 module generator 3 and PF1 is connected to PWM1 module generator 2. This project will demonstrate the implementation of PWM1 gen3 to control the brightness of (G+B) LED.

Steps to configure PWM module:
Set PWM clock
Enable PWM module
Enable GPIO module (so that GPIO can be configured to PWM out)
Set GPIO pins to PWM out
Configure PWM pin modules
Configure PWM generator (count up/count down/ count up-down)
Set the PWM base frequency
Set the PWM pulsewidth
Enable output on PWM pins
Enable PWM generator and set to run mode
***/
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/pwm.h"
#include "driverlib/pin_map.h"
#include "driverlib/gpio.h"

#define PWM_BASE_FREQ 100 //Hz

int main(void)
{
	uint32_t val_load, pwm_clk;
	uint16_t duty = 1;
	uint8_t up=1, down=0;
	uint16_t i = 0;

	SysCtlClockSet(SYSCTL_SYSDIV_5 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ); //set sys clock to 80 MHz
	SysCtlPWMClockSet(SYSCTL_PWMDIV_64);    //set pwm clock

	SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM1); //enable pwm1 module
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);    //enable gpioF module

	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_3);    //set pf3 to pwm out
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_2);    //set pf2 to pwm out
	GPIOPinConfigure(GPIO_PF3_M1PWM7);
	GPIOPinConfigure(GPIO_PF2_M1PWM6);

	pwm_clk = SysCtlClockGet() / 64;
	val_load = (pwm_clk / PWM_BASE_FREQ) - 1;   //counter value for pwm freq
	PWMGenConfigure(PWM1_BASE, PWM_GEN_3, PWM_GEN_MODE_DOWN);   //config module for count dowm mode
	PWMGenPeriodSet(PWM1_BASE, PWM_GEN_3, val_load);    //load the counter

	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, duty*val_load/100);  //set width for pf2
	PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, duty*val_load/100);  //set width for pf3
	PWMOutputState(PWM1_BASE, PWM_OUT_6_BIT | PWM_OUT_7_BIT, true); //enable output
	PWMGenEnable(PWM1_BASE, PWM_GEN_3); //enable pwm generator

    while(1)
	{
        PWMPulseWidthSet(PWM1_BASE, PWM_OUT_6, duty*val_load/100);
        PWMPulseWidthSet(PWM1_BASE, PWM_OUT_7, duty*val_load/100);
        if (duty == 100)
        {
            down = 1;
            up = 0;
        }
        if (duty == 1)
        {
            up = 1;
            down = 0;
        }
        if (up)
            duty += 1;
        if (down)
            duty -= 1;
        for(i = 0; i< 40000; i++);
	}
}
